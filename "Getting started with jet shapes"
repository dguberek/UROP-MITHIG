//this code attemps to create fig. 7 but has many errors
#define analysis_cxx
#include "analysis.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>


#include "makeMultiPanelCanvas.C"


float allpuritypbpb[] = {0.725758, 0.720249, 0.753094, 0.703853, 0.730487, 0.756007, 0.741809, 0.737945, 0.725995, 0.786819, 0.704426, 0.743147, 0.775786, 0.827101, 0.715906, 0.710863, 0.739059, 0.687001, 0.719965, 0.743805, 0.720358, 0.724734, 0.719121, 0.758637, 0.699659, 0.73539, 0.76691, 0.731031, 0.730948, 0.717619, 0.786722, 0.695959, 0.733827, 0.771255, 0.836782, 0.749695, 0.739283, 0.788322, 0.711966, 0.763817, 0.786493, 0.816522, 0.733207, 0.719114, 0.785248, 0.705784, 0.734519, 0.769831, 0.84767, 0.772594, 0.766181, 0.802428, 0.720997, 0.80606, 0.822834, 0.774406};
float allpuritypp[] = {0.823368, 0.823368, 0.823368, 0.823368, 0.823368, 0.823368, 0.823368, 0.846154, 0.846154, 0.846154, 0.846154, 0.846154, 0.846154, 0.846154, 0.820975, 0.820975, 0.820975, 0.820975, 0.820975, 0.820975, 0.820975, 0.830048, 0.830048, 0.830048, 0.830048, 0.830048, 0.830048, 0.830048, 0.846293, 0.846293, 0.846293, 0.846293, 0.846293, 0.846293, 0.846293, 0.859037, 0.859037, 0.859037, 0.859037, 0.859037, 0.859037, 0.859037, 0.863744, 0.863744, 0.863744, 0.863744, 0.863744, 0.863744, 0.863744, 0.857244, 0.857244, 0.857244, 0.857244, 0.857244, 0.857244, 0.857244};

float getpurity(float phoetmin, float hibinmin, bool ispp)
{
    int row = -1;
    int col = -1;
    if(phoetmin==40)  row = 0;
    if(phoetmin==60)  row = 1;
    if(phoetmin==100) row = 7;
    if(hibinmin==0)   col = 3;
    if(hibinmin==20)  col = 4;
    if(hibinmin==60)  col = 5;
    if(hibinmin==100) col = 6;
    if(row>-1 && col > -1 && ispp) return allpuritypp[row*7+col];
    if(row>-1 && col > -1 && !ispp) return allpuritypbpb[row*7+col];
    return 1; //no purity applied
}

void analysis::Loop()
{
    //   In a ROOT session, you can do:
    //      root> .L analysis.C
    //      root> analysis t
    //      root> t.GetEntry(12); // Fill t data members with entry number 12
    //      root> t.Show();       // Show values of entry 12
    //      root> t.Show(16);     // Read and show values of entry 16
    //      root> t.Loop();       // Loop on all entries
    //
    
    //     This is the loop skeleton where:
    //    jentry is the global entry number in the chain
    //    ientry is the entry number in the current Tree
    //  Note that the argument to GetEntry must be:
    //    jentry for TChain::GetEntry
    //    ientry for TTree::GetEntry and TBranch::GetEntry
    //
    //       To read only selected branches, Insert statements like:
    // METHOD1:
    //    fChain->SetBranchStatus("*",0);  // disable all branches
    //    fChain->SetBranchStatus("branchname",1);  // activate branchname
    // METHOD2: replace line
    //    fChain->GetEntry(jentry);       //read all branches
    //by  b_branchname->GetEntry(ientry); //read only this branch
    if (fChain == 0) return;
    using namespace std;
    
    TFile * outputfile = new TFile("outfilename1.root","recreate");
    TH1D * signalJetEphoE[4] = new TH1D[4]("signalJetEphoE","JetPt/PhoE title;yaxis title",16,0,2);
    TH1D * mix_signalJetEphoE[4] = new TH1D[4]("mix_signalJetEphoE","JetPt/PhoE title;yaxis title",16,0,2);
    TH1D * sidebandJetEphoE[4] = new TH1D[4]("sidebandJetEphoE","JetPt/PhoE title;yaxis title",16,0,2);
    TH1D * mix_sidebandJetEphoE[4] = new TH1D[4]("mix_sidebandJetEphoE","JetPt/PhoE title;yaxis title",16,0,2);
    TH1D * fig7[4] = new TH1D[4]("fig7","JetPt/PhoE title;yaxis title",16,0,2)
    //TH1D * rhoR = new TH1D("rhoR","title;xaxis title;yaxis title",20,0,1);
    
    Long64_t nentries = fChain->GetEntriesFast();
    
    int sig_nphotons;
    int side_nphotons;
    int lowBinBound, highBinBound;
    bool signal;
    bool sideband;
    float purities[4];
    

    for(int iBin = 0; iBin < 4; iBin++) {
        
        sig_nphotons = 0;
        side_nphotons = 0;
        
        if (iBin==0)    {
            lowBinBound = 0;
            highBinBound = 20;
            purities[iBin] = getpurity(60.0, lowBinBound, false);
        }
        if (iBin==1)    {
            lowBinBound = 20;
            highBinBound = 60;
            purities[iBin] = getpurity(60.0, lowBinBound, false);
        }
        if (iBin==2)    {
            lowBinBound = 60;
            highBinBound = 100;
            purities[iBin] = getpurity(60.0, lowBinBound, false);
        }
        if (iBin==3)    {
            lowBinBound = 100;
            highBinBound = 200;
            purities[iBin] = getpurity(60.0, lowBinBound, false);
        }

    
        Long64_t nbytes = 0, nb = 0;
        
            for (Long64_t jentry=0; jentry<nentries;jentry++) {
                //if (jentry > 10000) break; //to check earlier
                Long64_t ientry = LoadTree(jentry);
                if (jentry%10000==0) cout<< jentry << " out of " << nentries << endl ;
                if (ientry < 0) break;
                nb = fChain->GetEntry(jentry);   nbytes += nb;
                if (phoNoise[0]==0) continue;
                if (phoEtCorrected[0] < 60 ) continue;
                signal = (phoSigmaIEtaIEta_2012[0]<0.010);
                sideband = (phoSigmaIEtaIEta_2012[0]>0.011 && phoSigmaIEtaIEta_2012[0]<0.017);
                if(!signal && !sideband) continue;
        
        
                if (signal) {
           
                    sig_nphotons++;
                    if(!(lowBinBound <= hiBin && hiBin<highBinBound)) continue;
        
                    for(int ijet = 0 ; ijet < njet ; ijet++) {
                        if(jetpt[ijet]<30) continue;
                        if(jeteta[ijet]>1.6) continue;
                        if(acos(cos(phoPhi[0]-jetphi[ijet]))<(7.0*3.14/8.0)) continue;
                        signalJetEphoE[iBin]->Fill(jetpt[ijet]/phoEtCorrected[0]);
                    }
           
                    for(int ijet = 0 ; ijet < njet ; ijet++) {
                        if(jetpt_mix[ijet]<30) continue;
                        if(jeteta_mix[ijet]>1.6) continue;
                        if(acos(cos(phoPhi[0]-jetphi_mix[0]))<(7.0*3.14/8.0)) continue;
                        mix_signalJetEphoE[iBin]->Fill(jetpt_mix[ijet]/phoEtCorrected[0]);
                    }
                    
                    
                }
        
                if (sideband) {
                    
                    side_nphotons++;
                    if(!(lowBinBound <= hiBin && hiBin<highBinBound)) continue;
            
                    for(int ijet = 0 ; ijet < njet ; ijet++) {
                        if(jetpt[ijet]<30) continue;
                        if(jeteta[ijet]>1.6) continue;
                        if(acos(cos(phoPhi[0]-jetphi[ijet]))<(7.0*3.14/8.0)) continue;
                        sidebandJetEphoE[iBin]->Fill(jetpt[ijet]/phoEtCorrected[0]);
                    }
            
                    for(int ijet = 0 ; ijet < njet ; ijet++) {
                        if(jetpt_mix[ijet]<30) continue;
                        if(jeteta_mix[ijet]>1.6) continue;
                        if(acos(cos(phoPhi[0]-jetphi_mix[ijet]))<(7.0*3.14/8.0)) continue;
                        mix_sidebandJetEphoE[iBin]->Fill(jetpt_mix[ijet]/phoEtCorrected[0]);
                    }
                }
            
            signalJetEphoE[iBin]->Scale(1.0/(sig_nphotons*(2.0/16.0)));
            mix_signalJetEphoE[iBin]->Scale(1.0/(sig_nphotons*(2.0/16.0)));
            sidebandJetEphoE[iBin]->Scale(1.0/(side_nphotons*(2.0/16.0)));
            mix_sidebandJetEphoE[iBin]->Scale(1.0/(side_nphotons*(2.0/16.0)));
        }
        
        
        

//for a=signal-signalmix do I loop through each histogram and subtract, or how do i implement? (already have array of purities)
        //sum a->Add(signal, (-1)*signalmix)
    
    }
    
    //for(int iTrk = 0; iTrk < nTrk; iTrk++) {
    //double dr;
    //double dPhi = acos(cos(jetphi[ijet]-trkPhi[iTrk]));
    //double dEta =(jeteta[ijet]-trkEta[iTrk]);
    //dr = sqrt((dPhi*dPhi)+(dEta*dEta));
    //rhoR->Fill(dr,trkPt[iTrk]/jetpt[ijet]); // Fill(what you plot, how you weight)
    
    //}
    
    
    outputfile->Write();
    outputfile->Close();
    
   //how is the outputfile filled with all the generated data?
}


int main(int argc, char *argv[])
{
    analysis * ana = new analysis();
    ana->Loop();
    return 0;
}
